name: CI

on:
  pull_request:
    branches: [ dev ]

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    # ===============================================
    # 💡 1. MySQL Docker 컨테이너 서비스 정의 (필수)
    # ===============================================
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root  # 컨테이너 시작에 필요한 임시 비밀번호
          MYSQL_DATABASE: test_db    # 테스트 DB 이름
        ports:
          - 3306:3306                # 호스트 포트로 연결
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5         # DB가 완전히 켜질 때까지 대기
    env:
      SPRING_PROFILES_ACTIVE: test
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set up Gradle # Gradle 설정, 종속성 및 빌드 캐시를 자동으로 관리
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-read-only: false

      # 💡 2단계: Spring Boot 접속 정보 설정
      - name: Configure DB Connection
        run: |
          # 127.0.0.1:3306으로 접속하도록 환경 변수 설정
          echo "SPRING_DATASOURCE_URL=jdbc:mysql://127.0.0.1:3306/test_db?useSSL=false&allowPublicKeyRetrieval=true" >> $GITHUB_ENV
          echo "SPRING_DATASOURCE_USERNAME=root" >> $GITHUB_ENV # Docker 서비스에 설정된 사용자
          echo "SPRING_DATASOURCE_PASSWORD=root" >> $GITHUB_ENV # Docker 서비스에 설정된 비밀번호

      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      # check를 통해서 빌드와 테스트 동시에 진행 / test 설정을 CI에 사용
      - name: Run tests with coverage check
        run: ./gradlew clean check